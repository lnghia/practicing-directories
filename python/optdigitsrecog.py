import numpy as np
import pandas as pd 
from sklearn.cluster import KMeans
from sklearn import datasets
from matplotlib import pyplot as plt 

# Load dataset

digits=datasets.load_digits()

# Initialize K-means model with 10 cluster centers ( there are 10 digits in total from 0-9 )

model=KMeans(n_clusters=10, random_state=42)

samples=digits.data

# np.append(samples, np.array([
# [0.00,0.30,2.96,3.81,3.12,0.22,0.00,0.00,0.15,5.91,7.61,7.15,7.62,4.55,0.00,0.00,0.76,6.70,3.03,0.00,4.55,7.54,0.76,0.00,0.00,2.13,3.05,0.91,1.75,7.62,2.28,0.00,4.23,7.61,7.61,7.24,5.32,7.62,1.44,0.00,5.78,6.53,1.81,7.39,7.62,4.92,0.00,0.00,4.02,7.61,7.62,7.61,7.54,5.78,5.94,4.57,0.22,3.49,3.50,1.59,3.18,7.45,7.61,3.57],
# [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.15,2.73,3.81,3.81,3.04,0.00,0.00,0.37,5.98,7.62,7.00,6.86,7.24,0.15,0.00,3.19,7.62,3.10,0.07,1.29,7.62,7.54,0.00,3.80,7.62,0.00,0.00,0.08,5.17,7.62,0.00,3.12,7.62,5.01,2.51,2.59,6.69,6.31,0.00,0.22,4.39,7.15,7.62,7.62,7.00,1.96,0.00,0.00,0.00,0.15,0.76,0.76,0.30,0.00],
# [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.53,1.52,0.91,0.00,0.00,0.00,0.00,0.53,6.85,7.62,7.24,4.02,0.00,0.00,0.00,3.34,7.62,2.95,4.87,7.61,1.59,0.00,0.00,5.25,6.54,0.00,0.38,6.93,5.63,0.00,0.00,4.32,7.62,5.01,1.43,3.87,7.62,0.00,0.00,0.22,4.17,7.38,7.62,7.38,7.46,0.00,0.00,0.00,0.00,0.68,2.89,4.57,3.34],
# [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.46,1.52,1.37,0.00,0.00,0.00,0.00,0.45,6.69,7.62,7.62,6.92,0.75,0.00,0.00,3.57,7.62,2.73,2.66,7.46,4.18,0.00,0.00,4.49,7.16,0.83,0.00,6.09,5.33,0.00,0.00,1.81,7.38,7.08,4.18,7.30,4.71,0.00,0.00,0.00,1.29,5.62,6.86,6.09,1.35,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00] 
# ]), axis=0)

# np.append(samples, np.array([
# [0.00,0.00,0.00,0.00,0.00,0.00,0.53,2.74,0.00,0.00,0.00,0.68,3.73,5.94,4.64,7.62,0.00,1.82,4.95,7.32,7.55,5.56,4.10,7.62,2.50,7.62,7.62,6.70,3.20,1.98,4.18,7.62,1.90,6.63,7.62,7.62,7.62,7.62,7.62,7.31,0.00,0.00,0.08,0.76,0.76,1.52,5.78,6.70,0.00,0.00,0.00,0.00,0.00,0.00,6.16,5.40,0.00,0.00,0.00,0.00,0.00,0.00,6.78,4.72],
# [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,2.36,1.90,6.63,1.37,0.00,0.00,0.45,5.55,7.62,5.55,7.62,2.20,0.00,0.83,6.24,7.47,3.26,3.42,7.62,0.75,0.00,6.23,7.62,6.09,3.81,5.78,7.47,0.15,0.00,4.79,6.10,6.70,6.86,7.47,7.62,1.67,0.00,0.00,0.00,0.00,0.00,6.09,5.48,0.00,0.00,0.00,0.00,0.00,0.00,6.55,5.10,0.00],
# [0.00,0.00,0.00,0.00,0.08,0.46,0.53,0.00,0.00,0.00,0.00,0.07,5.02,7.16,7.47,2.58,0.00,0.00,0.00,4.02,7.62,4.48,7.62,3.04,0.00,0.00,2.12,7.54,4.78,1.21,7.62,2.66,0.00,0.83,7.00,7.00,1.90,3.04,7.62,2.51,0.00,2.28,7.62,7.62,7.62,7.62,7.62,7.62,0.00,0.00,0.76,1.52,1.52,5.02,7.39,2.29,0.00,0.00,0.00,0.00,0.00,5.02,6.24,0.00],
# [0.00,0.00,0.00,0.00,1.51,1.21,0.53,0.00,0.00,0.00,0.07,3.35,7.54,7.46,7.47,0.45,0.00,1.06,5.48,7.62,5.18,4.86,7.31,0.15,3.04,7.39,7.24,3.04,0.07,7.01,5.25,0.00,7.39,7.54,4.49,3.81,4.11,7.62,4.33,0.00,5.86,6.86,6.86,7.09,7.62,7.62,7.47,0.38,0.00,0.00,0.00,0.00,4.79,7.08,0.53,0.00,0.00,0.00,0.00,0.00,5.33,6.09,0.00,0.00]
# ]), axis=0)

# np.append(samples, np.array([
# [0.00,0.00,0.00,0.53,0.00,0.00,0.00,0.00,0.00,0.00,0.60,7.47,2.58,0.00,0.00,0.00,0.00,0.00,3.65,7.62,2.65,4.19,0.08,0.00,0.00,1.89,7.54,5.17,2.81,7.62,1.44,0.00,0.00,6.01,7.62,4.26,4.57,7.62,4.95,4.42,0.00,5.40,6.86,6.86,6.94,7.62,7.16,6.40,0.00,0.00,0.00,0.00,0.76,7.62,3.04,0.00,0.00,0.00,0.00,0.00,0.08,4.19,1.06,0.00],
# [0.00,0.00,0.00,0.00,0.00,0.00,0.61,0.00,0.00,0.00,0.00,0.00,0.15,4.61,7.61,1.07,0.00,0.00,0.00,1.29,5.91,7.61,7.62,1.90,0.00,0.00,2.57,7.31,7.15,4.39,7.62,2.28,0.00,0.30,7.47,6.01,0.68,1.89,7.62,2.13,0.00,0.00,1.22,0.30,0.00,3.50,7.62,0.76,0.00,0.00,0.00,0.00,0.00,3.80,7.62,0.00,0.00,0.00,0.00,0.00,0.00,2.66,6.09,0.00],
# [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,2.66,6.86,5.18,3.58,0.82,0.00,0.00,0.00,1.14,4.34,6.47,7.54,6.69,0.45,0.00,0.00,0.38,0.61,0.00,2.43,7.62,2.21,0.00,5.01,7.54,7.62,4.64,5.70,7.62,2.43,0.00,7.16,7.53,7.46,7.62,7.62,7.62,4.72,0.00,2.80,6.70,6.31,4.33,4.26,4.26,0.74],
# [0.00,0.00,0.00,0.00,1.13,3.73,0.75,0.00,0.00,0.00,0.08,4.10,7.54,7.62,4.80,0.00,0.00,0.00,4.86,7.62,4.56,5.63,6.47,0.00,0.00,0.00,6.09,4.25,0.00,4.57,6.86,0.00,0.00,0.00,0.00,0.00,0.00,6.16,6.17,0.00,0.00,0.00,1.59,2.29,3.50,7.62,3.19,4.70,0.00,4.40,7.62,7.62,7.62,7.54,3.88,7.62,0.00,6.01,7.61,7.62,7.61,7.62,7.62,6.77]
# ]), axis=0)

# Compute centroids based on data for training

model.fit(digits.data)

# Initialize data for testing

[
[0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,9,10,0,0,0,0,0,8,3,8,0,0,0,0,5,13,8,12,8,8,0,0,1,3,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,5,7,7,3,6,3,0,0,6,9,12,7,11,0,0,0,0,4,0,4,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,1,0,0,8,0,0,2,11,3,0,0,8,0,3,9,1,0,0,0,8,1,11,0,0,0,0,0,9,10,1,0,0,0,0,0,3,0,0,0,0,0,0,],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,11,2,0,0,0,0,5,15,9,9,8,4,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,]
]


new_samples=np.array([
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,1,10,0,9,0,9,0,0,3,8,7,12,5,6,0,0,0,10,5,4,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,6,9,7,0,0,0,0,3,9,0,8,0,2,0,3,10,7,9,12,9,6,0,2,7,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,0,0,0,1,8,0,10,11,0,0,0,4,7,8,6,8,1,0,0,1,7,3,0,4,4,0,0,0,0,0,0,3,8,0,0,0,0,0,0,0,0,0],
[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,8,0,0,0,0,1,8,8,0,0,0,0,4,12,10,8,9,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
])





# Cluster new data

new_labels=model.predict(new_samples)

# Map predicted labels with centroids labels

for i in range(len(new_labels)):
    if new_labels[i] == 0:
        print(3, end='')
    elif new_labels[i] == 1:
        print(0, end='')
    elif new_labels[i] == 2:
        print(8, end='')
    elif new_labels[i] == 3:
        print(1, end='')
    elif new_labels[i] == 4:
        print(9, end='')
    elif new_labels[i] == 5:
        print(2, end='')
    elif new_labels[i] == 6:
        print(4, end='')
    elif new_labels[i] == 7:
        print(7, end='')
    elif new_labels[i] == 8:
        print(6, end='')
    elif new_labels[i] == 9:
        print(5, end='')

# Plot centroids images

fig1=plt.figure(1, figsize=(8, 3))
fig1.suptitle('cluster center images', fontsize=14, fontweight='bold')

for i in range(10):
    ax=fig1.add_subplot(2, 5, 1+i)
    ax.imshow(model.cluster_centers_[i].reshape((8, 8)), cmap=plt.cm.binary)

# Plot clustered data 

fig2 = plt.figure(2, figsize=(6, 6))

fig2.subplots_adjust(left=0, right=1, bottom=0, top=1, hspace=0.05, wspace=0.05)

for i in range(64):

    # Initialize the subplots: add a subplot in the grid of 8 by 8, at the i+1-th position

    ax = fig2.add_subplot(8, 8, i+1, xticks=[], yticks=[])

    # Display an image at the i-th position

    ax.imshow(digits.images[i], cmap=plt.cm.binary, interpolation='nearest')

    # Label the image with the target value

    ax.text(0, 7, str(digits.target[i]))

fig1.show()
fig2.show()

print('\npress any key to exit.')

input()
